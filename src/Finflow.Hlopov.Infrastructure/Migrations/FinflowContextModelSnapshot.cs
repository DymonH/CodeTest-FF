// <auto-generated />
using System;
using Finflow.Hlopov.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Finflow.Hlopov.Infrastructure.Migrations
{
    [DbContext(typeof(FinflowContext))]
    partial class FinflowContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("Relational:Sequence:.finflow_client_hilo", "'finflow_client_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Finflow.Hlopov.Core.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "finflow_client_hilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("Surname");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Finflow.Hlopov.Core.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("Finflow.Hlopov.Core.Entities.Remittance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("ReceiveAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ReceiveCurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<decimal>("SendAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("SendCurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceiveCurrencyId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SendCurrencyId");

                    b.HasIndex("SenderId");

                    b.ToTable("Remittance");
                });

            modelBuilder.Entity("Finflow.Hlopov.Core.Entities.RemittanceStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("RemittanceStatus");
                });

            modelBuilder.Entity("Finflow.Hlopov.Core.Entities.RemittanceStatuses", b =>
                {
                    b.Property<Guid>("RemittanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RemittanceStatusId")
                        .HasColumnType("int");

                    b.HasKey("RemittanceId", "RemittanceStatusId");

                    b.HasIndex("RemittanceStatusId");

                    b.ToTable("RemittanceStatuses");
                });

            modelBuilder.Entity("Finflow.Hlopov.Core.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("Finflow.Hlopov.Core.Entities.Remittance", b =>
                {
                    b.HasOne("Finflow.Hlopov.Core.Entities.Currency", "ReceiveCurrency")
                        .WithMany()
                        .HasForeignKey("ReceiveCurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Finflow.Hlopov.Core.Entities.Client", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Finflow.Hlopov.Core.Entities.Currency", "SendCurrency")
                        .WithMany()
                        .HasForeignKey("SendCurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Finflow.Hlopov.Core.Entities.Client", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Finflow.Hlopov.Core.Entities.RemittanceStatus", b =>
                {
                    b.HasOne("Finflow.Hlopov.Core.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Finflow.Hlopov.Core.Entities.RemittanceStatuses", b =>
                {
                    b.HasOne("Finflow.Hlopov.Core.Entities.Remittance", "Remittance")
                        .WithMany("Statuses")
                        .HasForeignKey("RemittanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Finflow.Hlopov.Core.Entities.RemittanceStatus", "RemittanceStatus")
                        .WithMany()
                        .HasForeignKey("RemittanceStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
